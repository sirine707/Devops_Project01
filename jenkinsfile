@Library('Jenkins_Shared_Lib') _
pipeline{
    agent any
    parameters{
        choice(name:'action', choices:'create\ndelete',description:'choose create / destroy')
        string(name:'ImageName',description:"name of the image", defaultValue:'javaapp')
        string(name:'ImageTag',description:"tag of docker build", defaultValue:'v1')
        string(name:'DockerHubUser',description:"name of app", defaultValue:'sirinejnayeh')
    }   
    stages{
        stage('Git Checkout'){
            when{ expression{ params.action== 'create'}}
            steps{
                script{
                    gitCheckout(
                    branch: "main",
                    url: "https://github.com/sirine707/javaApplication.git"
                    )
                }
            }
        }

        stage('Unit Test for maven'){
            when{ expression{ params.action== 'create'}}
            steps{
                script{
                    mvnTest()
                }
            }
        }
        stage('integration Test for maven'){
            when{ expression{ params.action== 'create'}}
            steps{
                script{
                    mvnIntegrationTest()
                    
                }
            }
        }


        stage('static code analysis : sonarqube'){
            when{ expression{ params.action== 'create'}}
            steps{
                script{
                    def sonarcredentialsId = 'sonar_api'
                    staticCodeAnalysis(sonarcredentialsId)
                }
            }
        }

        stage('Quality gate check : sonarqube'){
            when{ expression{ params.action== 'create'}}
            steps{
                script{
                    def sonarcredentialsId = 'sonar_api'
                    QualityGateCheck(sonarcredentialsId)
                }
            }
        }
        stage('maven build : maven'){
            when{ expression{ params.action== 'create'}}
            steps{
                script{
                    mvnBuild()
                }
            }
        }
        stage('docker image build '){
            when{ expression{ params.action== 'create'}}
            steps{
                script{
                    dockerBuild("${params.ImageName}","${params.ImageTag}","${params.DockerHubUser}")
                }
            }
        }
        stage('docker imagescan :trivy '){
            when{ expression{ params.action== 'create'}}
            steps{
                script{
                    dockerImageScan("${params.ImageName}","${params.ImageTag}","${params.DockerHubUser}")
                }
            }
        }
    }
}